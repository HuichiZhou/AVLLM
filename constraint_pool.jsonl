{"uuid": 0, "category": "Limited Words", "level": 1, "constraint": "Limit the answer to within [[VAR1]] words", "vars": [{"name": "VAR1", "type": "int", "values": [30, 50, 100]}], "verify": "Use a word count function to verify the response does not exceed the specified limit of VAR1 words.", "python script": "def verify_response_limit(response_text, word_limit):\n                        word_count = len(response_text.split())\n                        meets_criteria = word_count <= word_limit\n                        return meets_criteria, word_count"}
{"uuid": 1, "category": "Limited Language", "level": 1, "constraint": "Answer must be [[VAR1]]", "vars": [{"name": "VAR1", "type": "choices", "values": ["English", "Chinese", "Spanish", "French", "Japanese"]}], "verify": "Utilize a language detection library to ensure the response is in the specified VAR1 language.", "python script": "def verify_language(response_text, expected_language):\n    from langdetect import detect\n    detected_language = detect(response_text)\n    language_map = {\n        \"English\": \"en\",\n        \"Chinese\": \"zh-cn\",\n        \"Spanish\": \"es\",\n        \"French\": \"fr\",\n        \"Japanese\": \"ja\"\n    }\n    expected_language_code = language_map.get(expected_language, expected_language)\n    return detected_language == expected_language_code"}
{"uuid": 2, "category": "Include Keywords", "level": 1, "constraint": "Include keywords [[VAR1]] in your response", "vars": [{"name": "VAR1", "type": "string", "values": ["health", "exercise", "run", "daily"]}], "verify": "Check the response text for the presence of the specified keywords VAR1. This can be done through simple string search or more advanced text analysis methods.", "python script": "def verify_keywords(response_text, keywords):\n    if isinstance(keywords, str):\n        keywords = [keywords]\n    for keyword in keywords:\n        if keyword.lower() not in response_text.lower():\n            return False\n    return True"}
{"uuid": 3, "category": "Sentence Word Limit", "level": 2, "constraint": "The [[VAR1]] sentence must not exceed [[VAR2]] words.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "int", "values": [5, 10, 15, 20, 25]}], "verify": "Verify the word count of the specified sentence does not exceed the limit.", "python script": "def verify_sentence_word_limit(response_text, sentence_number, word_limit):\n            sentences = response_text.split('. ')\n            selected_sentence = sentences[sentence_number - 1] if sentence_number <= len(sentences) else ''\n            word_count = len(selected_sentence.split())\n            return word_count <= word_limit"}
{"uuid": 4, "category": "Initial Word Type Constraint", "level": 4, "constraint": "The [[VAR1]] sentence must start with a [[VAR2]].", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "string", "values": ["noun", "adjective", "verb", "adverb", "preposition"]}], "verify": "Check if the specified sentence starts with the required part of speech.", "python script": "def verify_specific_sentence_structure(response_text, sentence_number, part_of_speech):\n            # This will require parsing the sentence for parts of speech, potentially using NLP tools\n            pass"}
{"uuid": 5, "category": "Mixed Sentence Constraints", "level": 5, "constraint": "The [[VAR1]] sentence must not exceed [[VAR2]] words and must end with a [[VAR3]].", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "int", "values": [5, 10, 15, 20, 25]}, {"name": "VAR3", "type": "string", "values": ["question mark", "exclamation point", "period"]}], "verify": "Check both the word limit and ending punctuation of the specified sentence.", "python script": "def verify_mixed_sentence_constraints(response_text, sentence_number, word_limit, punctuation):\n            sentences = response_text.split('. ')\n            selected_sentence = sentences[sentence_number - 1] if sentence_number <= len(sentences) else ''\n            word_count = len(selected_sentence.split())\n            ends_correctly = selected_sentence.endswith(punctuation)\n            return word_count <= word_limit and ends_correctly"}
{"uuid": 6, "category": "Control Keyword Frequency", "level": 2, "constraint": "In your response, the word [[VAR1]] should appear [[VAR2]] times.", "vars": [{"name": "VAR1", "type": "string", "values": ["because", "what", "while"]}, {"name": "VAR2", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the frequency of the specified word in the response.", "python script": "def verify_keyword_frequency(response_text, word, n):\n                                return response_text.split().count(word) == n"}
{"uuid": 7, "category": "Regulate Letter Frequency", "level": 2, "constraint": "In your response, the letter [[VAR1]] should appear [[VAR2]] times.", "vars": [{"name": "VAR1", "type": "string", "values": ["a", "e", "i", "o", "u"]}, {"name": "VAR2", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the frequency of the specified letter in the response.", "python script": "def verify_letter_frequency(response_text, letter, n):\n                                return response_text.count(letter) == n"}
{"uuid": 8, "category": "Detectable Placeholder Number", "level": 2, "constraint": "The response must contain at least [[VAR1]] placeholders represented by square brackets, such as [[address]].", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the number of placeholders in square brackets in the response.", "python script": "def verify_number_placeholders(response_text, placeholder_count):\n                                return response_text.count('[[') >= placeholder_count"}
{"uuid": 9, "category": "Wrap in JSON Format", "level": 3, "constraint": "Entire output should be wrapped in JSON format.", "vars": [], "verify": "Check if the response is valid JSON format.", "python script": "import json\n                            def verify_json_format(response_text):\n                                try:\n                                    json_object = json.loads(response_text)\n                                    return True\n                                except ValueError as e:\n                                    return False"}
{"uuid": 10, "category": "Highlight Sections Format", "level": 3, "constraint": "Highlight at least [[VAR1]] sections in your answer with markdown, i.e. *highlighted section*", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the highlighted sections formatted with markdown in the response.", "python script": "def verify_highlighted_sections(response_text, number_of_sections):\n                                highlighted = response_text.split(\"*\")\n                                return len(highlighted)/2 >= number_of_sections"}
{"uuid": 11, "category": "Repeat Prompt Instructions", "level": 4, "constraint": "First, repeat the request without change, then give your answer (do not say anything before repeating the request); the request you need to repeat does not include this sentence.", "vars": [], "verify": "Verify that the response starts with the repeated request before the actual answer.", "python script": "def verify_repeat_prompt(response_text, prompt):\n                                return response_text.startswith(prompt)"}
{"uuid": 12, "category": "Limited Sentences", "level": 3, "constraint": "Your answer must be composed of exactly [[VAR1]] sentences.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the number of sentences in the response.", "python script": "def verify_sentence_count(response_text, sentence_count):\n    from nltk.tokenize import sent_tokenize\n    sentences = sent_tokenize(response_text)\n    return len(sentences) == sentence_count"}
{"uuid": 13, "category": "Vocabulary Complexity", "level": 3, "constraint": "Use at least [[VAR1]] words that are [[VAR2]] letters long or more in your response.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "int", "values": [7, 8, 9, 10, 11]}], "verify": "Count the number of words that meet the length requirement.", "python script": "def verify_vocabulary_complexity(response_text, word_count, min_length):\n    words = response_text.split()\n    long_words = [word for word in words if len(word) >= min_length]\n    return len(long_words) >= word_count"}
{"uuid": 14, "category": "Control Keyword Frequency", "level": 3, "constraint": "Use the keyword [[VAR1]] at least [[VAR2]] times but no more than [[VAR3]] times in your response.", "vars": [{"name": "VAR1", "type": "string", "values": ["book", "author", "genre", "publish", "read"]}, {"name": "VAR2", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR3", "type": "int", "values": [2, 3, 4, 5, 6]}], "verify": "Count the occurrences of VAR1 in the response and check if it's within the specified range.", "python script": "def verify_keyword_frequency(response_text, keyword, min_count, max_count):\n    keyword_count = response_text.lower().count(keyword.lower())\n    return min_count <= keyword_count <= max_count"}
{"uuid": 15, "category": "Include Keywords", "level": 2, "constraint": "Include the following keywords in your response: [[VAR1]].", "vars": [{"name": "VAR1", "type": "choices", "values": [["determination", "effort", "success"], ["challenge", "achievement", "goal"], ["strategy", "planning", "outcome"], ["skill", "talent", "mastery"], ["competition", "opponent", "victory"]]}], "verify": "Check if all the specified keywords are present in the response.", "python script": "def verify_inclusion_of_keywords(response_text, keywords):\n    return all(keyword in response_text for keyword in keywords)"}
{"uuid": 16, "category": "Specific Punctuation", "level": 2, "constraint": "The response must include at least [[VAR1]] instances of exclamation points to express frustration.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the number of exclamation points in the response to ensure it meets or exceeds VAR1.", "python script": "def verify_specific_punctuation(response_text, min_exclamations):\n    exclamation_count = response_text.count('!')\n    return exclamation_count >= min_exclamations"}
{"uuid": 17, "category": "Specific Punctuation", "level": 3, "constraint": "Every [[VAR1]] sentence must contain at least one [[VAR2]].", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "string", "values": ["comma", "semicolon", "colon", "dash", "parentheses"]}], "verify": "Verify that every specified sentence contains the required punctuation.", "python script": "import re\n\ndef verify_specific_punctuation(response_text, sentence_interval, punctuation):\n    sentences = re.split(r'[.!?]+', response_text)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip() != '']\n    for i in range(sentence_interval - 1, len(sentences), sentence_interval):\n        if punctuation == 'parentheses':\n            if '(' not in sentences[i] or ')' not in sentences[i]:\n                return False\n        elif punctuation not in sentences[i]:\n            return False\n    return True"}
{"uuid": 18, "category": "Specific Punctuation", "level": 2, "constraint": "The response must end with the punctuation mark [[VAR1]].", "vars": [{"name": "VAR1", "type": "choices", "values": [".", "!", "?", ";", ":"]}], "verify": "Check if the last character of the response is the specified punctuation mark.", "python script": "def verify_end_punctuation(response_text, punctuation):\n    return response_text.strip()[-1] == punctuation"}
{"uuid": 19, "category": "Limited Paragraphs", "level": 2, "constraint": "Limit the response to exactly [[VAR1]] paragraphs.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the number of paragraphs in the response to ensure it matches VAR1.", "python script": "def count_paragraphs(text):\n    paragraphs = text.split('\\n\\n')\n    paragraphs = [p for p in paragraphs if p.strip()]\n    return len(paragraphs)\n\ndef verify_paragraph_limit(response_text, paragraph_limit):\n    return count_paragraphs(response_text) == paragraph_limit"}
{"uuid": 20, "category": "Specific Number Format", "level": 2, "constraint": "All numbers in the response must be formatted with [[VAR1]] decimal places.", "vars": [{"name": "VAR1", "type": "int", "values": [0, 1, 2, 3, 4]}], "verify": "Check that all numbers in the response are formatted to VAR1 decimal places.", "python script": "import re\n\ndef verify_number_format(response_text, decimal_places):\n    pattern = re.compile(r'\\b\\d+\\.\\d{' + str(decimal_places) + '}\\b')\n    return all(pattern.fullmatch(number) for number in re.findall(r'\\b\\d+\\.\\d+\\b', response_text))"}
{"uuid": 21, "category": "Specific Punctuation", "level": 2, "constraint": "End each sentence in your response with the punctuation mark [[VAR1]].", "vars": [{"name": "VAR1", "type": "choices", "values": [".", "?", "!"]}], "verify": "Check if each sentence ends with the specified punctuation mark.", "python script": "def verify_sentence_punctuation(response_text, punctuation_mark):\n    import re\n    sentences = re.split(r'[.!?]+(?=\\s|$)', response_text)\n    sentences = [s for s in sentences if s.strip() != '']\n    return all(s.endswith(punctuation_mark) for s in sentences)"}
{"uuid": 22, "category": "Sentence Complexity", "level": 3, "constraint": "Each sentence must contain at least [[VAR1]] commas.", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the number of commas in each sentence to ensure it meets or exceeds VAR1.", "python script": "def verify_sentence_complexity(response_text, min_commas):\n    sentences = response_text.split('. ')\n    return all(sentence.count(',') >= min_commas for sentence in sentences if sentence.strip())"}
{"uuid": 23, "category": "Sentence Word Limit", "level": 2, "constraint": "Your answer must be less than or equal to [[VAR1]] words per sentence.", "vars": [{"name": "VAR1", "type": "int", "values": [8, 10, 12, 14, 16]}], "verify": "Split the response into sentences and verify that each sentence contains less than or equal to VAR1 words.", "python script": "def verify_sentence_word_limit(response_text, words_per_sentence):\n    sentences = response_text.split('.')\n    return all(len(sentence.split()) == words_per_sentence for sentence in sentences if sentence)"}
{"uuid": 24, "category": "Specific Punctuation", "level": 1, "constraint": "Use the punctuation mark [[VAR1]] exactly [[VAR2]] times in your response.", "vars": [{"name": "VAR1", "type": "choices", "values": [",", ".", "!", "?"]}, {"name": "VAR2", "type": "int", "values": [1, 2, 3, 4, 5]}], "verify": "Count the occurrences of the specified punctuation mark and verify it matches VAR2.", "python script": "def verify_specific_punctuation(response_text, punctuation_mark, count):\n    return response_text.count(punctuation_mark) == count"}
{"uuid": 25, "category": "Vocabulary Range", "level": 2, "constraint": "Use at least [[VAR1]] words that appear only once in your response.", "vars": [{"name": "VAR1", "type": "int", "values": [10, 15, 20, 25, 30]}], "verify": "Verify that the response contains at least the number of unique words specified by VAR1.", "python script": "def verify_vocabulary_range(response_text, unique_word_count):\n    words = set(response_text.split())\n    return len(words) >= unique_word_count"}
{"uuid": 26, "category": "Include Keywords", "level": 2, "constraint": "The response must include at least [[VAR1]] of the following keywords: [[VAR2]].", "vars": [{"name": "VAR1", "type": "int", "values": [1, 2, 3, 4, 5]}, {"name": "VAR2", "type": "choices", "values": [["machine learning", "neural networks", "automation", "cognitive computing", "data analysis"]]}], "verify": "Check that the response contains at least VAR1 of the specified keywords.", "python script": "def verify_inclusion_of_keywords(response_text, minimum_keywords, keywords):\n    count = sum(keyword in response_text for keyword in keywords)\n    return count >= minimum_keywords"}
{"uuid": 27, "category": "Sentence Word Limit", "level": 3, "constraint": "No sentence in your response should exceed [[VAR1]] words.", "vars": [{"name": "VAR1", "type": "int", "values": [10, 15, 20, 25, 30]}], "verify": "Check that no sentence exceeds the specified word limit.", "python script": "import re\n\ndef verify_sentence_word_limit(response_text, word_limit):\n    sentences = re.split(r'[.!?]+', response_text)\n    sentences = [s.strip() for s in sentences if s.strip() != '']\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > word_limit:\n            return False\n    return True"}
{"uuid": 28, "category": "Sentence Complexity", "level": 3, "constraint": "Construct each sentence with a minimum of [[VAR1]] words and a maximum of [[VAR2]] words.", "vars": [{"name": "VAR1", "type": "int", "values": [5, 6, 7, 8, 9]}, {"name": "VAR2", "type": "int", "values": [12, 15, 18, 20, 25]}], "verify": "Verify that each sentence has a word count within the specified range.", "python script": "def verify_sentence_complexity(response_text, min_words, max_words):\n    sentences = response_text.split('. ')\n    for sentence in sentences:\n        word_count = len(sentence.split())\n        if word_count < min_words or word_count > max_words:\n            return False\n    return True"}
